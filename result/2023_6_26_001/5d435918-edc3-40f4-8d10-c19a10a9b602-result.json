{"name": "用例10：主播端同意上麦", "status": "broken", "statusDetails": {"message": "FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\Users\\\\pgk bqt\\\\PycharmProjects\\\\Chamet_project\\\\common/screenshots/party_ten/party_ten_2023-06-26 11_51_22.png'", "trace": "self = <test_case.test_10party_mult.Test_multchamet object at 0x0000017F695F8D90>\n\n    @allure.severity(allure.severity_level.BLOCKER)\n    @allure.title('用例10：主播端同意上麦')\n    def test_TenParty_010(self):\n        logging.info('===用例10：主播端同意上麦===')\n        try:\n>           self.anchordriver.find_element(MobileBy.ID,\"com.hkfuliao.chamet:id/iv_invite\").click()\n\ntest_10party_mult.py:215: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.webdriver.WebDriver (session=\"e728f5c4-deae-4945-ab6d-a2cef974b6fd\")>, by = 'id', value = 'com.hkfuliao.chamet:id/iv_invite'\n\n    def find_element(self, by: str = AppiumBy.ID, value: Union[str, Dict, None] = None) -> MobileWebElement:\n        \"\"\"\n        Find an element given a AppiumBy strategy and locator\n    \n        Args:\n            by: The strategy\n            value: The locator\n    \n        Usage:\n            driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value='accessibility_id')\n    \n        Returns:\n            `appium.webdriver.webelement.WebElement`: The found element\n    \n        \"\"\"\n        # We prefer to patch locators in the client code\n        # Checking current context every time a locator is accessed could significantly slow down tests\n        # Check https://github.com/appium/python-client/pull/724 before submitting any issue\n        # if by == By.ID:\n        #     by = By.CSS_SELECTOR\n        #     value = '[id=\"%s\"]' % value\n        # elif by == By.TAG_NAME:\n        #     by = By.CSS_SELECTOR\n        # elif by == By.CLASS_NAME:\n        #     by = By.CSS_SELECTOR\n        #     value = \".%s\" % value\n        # elif by == By.NAME:\n        #     by = By.CSS_SELECTOR\n        #     value = '[name=\"%s\"]' % value\n    \n>       return self.execute(RemoteCommand.FIND_ELEMENT, {'using': by, 'value': value})['value']\n\nE:\\pycharm_file\\Chamet_project\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:387: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.webdriver.WebDriver (session=\"e728f5c4-deae-4945-ab6d-a2cef974b6fd\")>, driver_command = 'findElement', params = {'using': 'id', 'value': 'com.hkfuliao.chamet:id/iv_invite'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n>       response = self.command_executor.execute(driver_command, params)\n\nE:\\pycharm_file\\Chamet_project\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:438: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.appium_connection.AppiumConnection object at 0x0000017F69492F90>, command = 'findElement', params = {'using': 'id', 'value': 'com.hkfuliao.chamet:id/iv_invite'}\n\n    def execute(self, command, params):\n        \"\"\"Send a command to the remote server.\n    \n        Any path substitutions required for the URL mapped to the command should be\n        included in the command parameters.\n    \n        :Args:\n         - command - A string specifying the command to execute.\n         - params - A dictionary of named parameters to send with the command as\n           its JSON payload.\n        \"\"\"\n        command_info = self._commands[command]\n        assert command_info is not None, f\"Unrecognised command {command}\"\n        path = string.Template(command_info[1]).substitute(params)\n        if isinstance(params, dict) and \"sessionId\" in params:\n            del params[\"sessionId\"]\n        data = utils.dump_json(params)\n        url = f\"{self._url}{path}\"\n>       return self._request(command_info[0], url, body=data)\n\nE:\\pycharm_file\\Chamet_project\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:290: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.appium_connection.AppiumConnection object at 0x0000017F69492F90>, method = 'POST', url = 'http://localhost:4726/wd/hub/session/e728f5c4-deae-4945-ab6d-a2cef974b6fd/element'\nbody = '{\"using\": \"id\", \"value\": \"com.hkfuliao.chamet:id/iv_invite\"}'\n\n    def _request(self, method, url, body=None):\n        \"\"\"Send an HTTP request to the remote server.\n    \n        :Args:\n         - method - A string for the HTTP method to send the request with.\n         - url - A string for the URL to send the request to.\n         - body - A string for request body. Ignored unless method is POST or PUT.\n    \n        :Returns:\n          A dictionary with the server's parsed JSON response.\n        \"\"\"\n        LOGGER.debug(f\"{method} {url} {body}\")\n        parsed_url = parse.urlparse(url)\n        headers = self.get_remote_connection_headers(parsed_url, self.keep_alive)\n        response = None\n        if body and method not in (\"POST\", \"PUT\"):\n            body = None\n    \n        if self.keep_alive:\n>           response = self._conn.request(method, url, body=body, headers=headers)\n\nE:\\pycharm_file\\Chamet_project\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:311: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.poolmanager.PoolManager object at 0x0000017F66DB4650>, method = 'POST', url = 'http://localhost:4726/wd/hub/session/e728f5c4-deae-4945-ab6d-a2cef974b6fd/element', fields = None\nheaders = {'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.9.0 (selenium/4.9.0 (python windows))'}\nurlopen_kw = {'body': '{\"using\": \"id\", \"value\": \"com.hkfuliao.chamet:id/iv_invite\"}', 'request_url': 'http://localhost:4726/wd/hub/session/e728f5c4-deae-4945-ab6d-a2cef974b6fd/element'}\n\n    def request(self, method, url, fields=None, headers=None, **urlopen_kw):\n        \"\"\"\n        Make a request using :meth:`urlopen` with the appropriate encoding of\n        ``fields`` based on the ``method`` used.\n    \n        This is a convenience method that requires the least amount of manual\n        effort. It can be used in most situations, while still having the\n        option to drop down to more specific methods when necessary, such as\n        :meth:`request_encode_url`, :meth:`request_encode_body`,\n        or even the lowest level :meth:`urlopen`.\n        \"\"\"\n        method = method.upper()\n    \n        urlopen_kw[\"request_url\"] = url\n    \n        if method in self._encode_url_methods:\n            return self.request_encode_url(\n                method, url, fields=fields, headers=headers, **urlopen_kw\n            )\n        else:\n>           return self.request_encode_body(\n                method, url, fields=fields, headers=headers, **urlopen_kw\n            )\n\nE:\\pycharm_file\\Chamet_project\\Lib\\site-packages\\urllib3\\request.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.poolmanager.PoolManager object at 0x0000017F66DB4650>, method = 'POST', url = 'http://localhost:4726/wd/hub/session/e728f5c4-deae-4945-ab6d-a2cef974b6fd/element', fields = None\nheaders = {'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.9.0 (selenium/4.9.0 (python windows))'}, encode_multipart = True\nmultipart_boundary = None, urlopen_kw = {'body': '{\"using\": \"id\", \"value\": \"com.hkfuliao.chamet:id/iv_invite\"}', 'request_url': 'http://localhost:4726/wd/hub/session/e728f5c4-deae-4945-ab6d-a2cef974b6fd/element'}\nextra_kw = {'body': '{\"using\": \"id\", \"value\": \"com.hkfuliao.chamet:id/iv_invite\"}', 'headers': {'Accept': 'application/json', 'Co...python windows))'}, 'request_url': 'http://localhost:4726/wd/hub/session/e728f5c4-deae-4945-ab6d-a2cef974b6fd/element'}\n\n    def request_encode_body(\n        self,\n        method,\n        url,\n        fields=None,\n        headers=None,\n        encode_multipart=True,\n        multipart_boundary=None,\n        **urlopen_kw\n    ):\n        \"\"\"\n        Make a request using :meth:`urlopen` with the ``fields`` encoded in\n        the body. This is useful for request methods like POST, PUT, PATCH, etc.\n    \n        When ``encode_multipart=True`` (default), then\n        :func:`urllib3.encode_multipart_formdata` is used to encode\n        the payload with the appropriate content type. Otherwise\n        :func:`urllib.parse.urlencode` is used with the\n        'application/x-www-form-urlencoded' content type.\n    \n        Multipart encoding must be used when posting files, and it's reasonably\n        safe to use it in other times too. However, it may break request\n        signing, such as with OAuth.\n    \n        Supports an optional ``fields`` parameter of key/value strings AND\n        key/filetuple. A filetuple is a (filename, data, MIME type) tuple where\n        the MIME type is optional. For example::\n    \n            fields = {\n                'foo': 'bar',\n                'fakefile': ('foofile.txt', 'contents of foofile'),\n                'realfile': ('barfile.txt', open('realfile').read()),\n                'typedfile': ('bazfile.bin', open('bazfile').read(),\n                              'image/jpeg'),\n                'nonamefile': 'contents of nonamefile field',\n            }\n    \n        When uploading a file, providing a filename (the first parameter of the\n        tuple) is optional but recommended to best mimic behavior of browsers.\n    \n        Note that if ``headers`` are supplied, the 'Content-Type' header will\n        be overwritten because it depends on the dynamic random boundary string\n        which is used to compose the body of the request. The random boundary\n        string can be explicitly set with the ``multipart_boundary`` parameter.\n        \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        extra_kw = {\"headers\": {}}\n    \n        if fields:\n            if \"body\" in urlopen_kw:\n                raise TypeError(\n                    \"request got values for both 'fields' and 'body', can only specify one.\"\n                )\n    \n            if encode_multipart:\n                body, content_type = encode_multipart_formdata(\n                    fields, boundary=multipart_boundary\n                )\n            else:\n                body, content_type = (\n                    urlencode(fields),\n                    \"application/x-www-form-urlencoded\",\n                )\n    \n            extra_kw[\"body\"] = body\n            extra_kw[\"headers\"] = {\"Content-Type\": content_type}\n    \n        extra_kw[\"headers\"].update(headers)\n        extra_kw.update(urlopen_kw)\n    \n>       return self.urlopen(method, url, **extra_kw)\n\nE:\\pycharm_file\\Chamet_project\\Lib\\site-packages\\urllib3\\request.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.poolmanager.PoolManager object at 0x0000017F66DB4650>, method = 'POST', url = 'http://localhost:4726/wd/hub/session/e728f5c4-deae-4945-ab6d-a2cef974b6fd/element', redirect = True\nkw = {'assert_same_host': False, 'body': '{\"using\": \"id\", \"value\": \"com.hkfuliao.chamet:id/iv_invite\"}', 'headers': {'Accep...on/json;charset=UTF-8', 'User-Agent': 'appium/python 2.9.0 (selenium/4.9.0 (python windows))'}, 'redirect': False, ...}\nu = Url(scheme='http', auth=None, host='localhost', port=4726, path='/wd/hub/session/e728f5c4-deae-4945-ab6d-a2cef974b6fd/element', query=None, fragment=None)\nconn = <urllib3.connectionpool.HTTPConnectionPool object at 0x0000017F68784B90>\n\n    def urlopen(self, method, url, redirect=True, **kw):\n        \"\"\"\n        Same as :meth:`urllib3.HTTPConnectionPool.urlopen`\n        with custom cross-host redirect logic and only sends the request-uri\n        portion of the ``url``.\n    \n        The given ``url`` parameter must be absolute, such that an appropriate\n        :class:`urllib3.connectionpool.ConnectionPool` can be chosen for it.\n        \"\"\"\n        u = parse_url(url)\n        self._validate_proxy_scheme_url_selection(u.scheme)\n    \n        conn = self.connection_from_host(u.host, port=u.port, scheme=u.scheme)\n    \n        kw[\"assert_same_host\"] = False\n        kw[\"redirect\"] = False\n    \n        if \"headers\" not in kw:\n            kw[\"headers\"] = self.headers.copy()\n    \n        if self._proxy_requires_url_absolute_form(u):\n            response = conn.urlopen(method, url, **kw)\n        else:\n>           response = conn.urlopen(method, u.request_uri, **kw)\n\nE:\\pycharm_file\\Chamet_project\\Lib\\site-packages\\urllib3\\poolmanager.py:376: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPConnectionPool object at 0x0000017F68784B90>, method = 'POST', url = '/wd/hub/session/e728f5c4-deae-4945-ab6d-a2cef974b6fd/element'\nbody = '{\"using\": \"id\", \"value\": \"com.hkfuliao.chamet:id/iv_invite\"}'\nheaders = {'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.9.0 (selenium/4.9.0 (python windows))'}\nretries = Retry(total=3, connect=None, read=None, redirect=None, status=None), redirect = False, assert_same_host = False, timeout = <object object at 0x0000017F65BE5640>, pool_timeout = None, release_conn = True\nchunked = False, body_pos = None, response_kw = {'request_url': 'http://localhost:4726/wd/hub/session/e728f5c4-deae-4945-ab6d-a2cef974b6fd/element'}\nparsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/wd/hub/session/e728f5c4-deae-4945-ab6d-a2cef974b6fd/element', query=None, fragment=None), destination_scheme = None, conn = None\nrelease_this_conn = True, http_tunnel_required = False, err = None, clean_exit = False\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        release_conn=None,\n        chunked=False,\n        body_pos=None,\n        **response_kw\n    ):\n        \"\"\"\n        Get a connection from the pool and perform an HTTP request. This is the\n        lowest level call for making a request, so you'll need to specify all\n        the raw details.\n    \n        .. note::\n    \n           More commonly, it's appropriate to use a convenience method provided\n           by :class:`.RequestMethods`, such as :meth:`request`.\n    \n        .. note::\n    \n           `release_conn` will only behave as expected if\n           `preload_content=False` because we want to make\n           `preload_content=False` the default behaviour someday soon without\n           breaking backwards compatibility.\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param redirect:\n            If True, automatically handle redirects (status codes 301, 302,\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\n            will disable redirect, too.\n    \n        :param assert_same_host:\n            If ``True``, will make sure that the host of the pool requests is\n            consistent else will raise HostChangedError. When ``False``, you can\n            use the pool on an HTTP proxy and request foreign hosts.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param pool_timeout:\n            If set and the pool is set to block=True, then this method will\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n            connection is available within the time period.\n    \n        :param release_conn:\n            If False, then the urlopen call will not release the connection\n            back into the pool once a response is received (but will release if\n            you read the entire contents of the response such as when\n            `preload_content=True`). This is useful if you're not preloading\n            the response's content immediately. You will need to call\n            ``r.release_conn()`` on the response ``r`` to return the connection\n            back into the pool. If None, it takes the value of\n            ``response_kw.get('preload_content', True)``.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param int body_pos:\n            Position to seek to in file-like body in the event of a retry or\n            redirect. Typically this won't need to be set because urllib3 will\n            auto-populate the value when needed.\n    \n        :param \\\\**response_kw:\n            Additional parameters are passed to\n            :meth:`urllib3.response.HTTPResponse.from_httplib`\n        \"\"\"\n    \n        parsed_url = parse_url(url)\n        destination_scheme = parsed_url.scheme\n    \n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get(\"preload_content\", True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        # Ensure that the URL we're connecting to is properly encoded\n        if url.startswith(\"/\"):\n            url = six.ensure_str(_encode_target(url))\n        else:\n            url = six.ensure_str(parsed_url.url)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        http_tunnel_required = connection_requires_http_tunnel(\n            self.proxy, self.proxy_config, destination_scheme\n        )\n    \n        # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n        # have to copy the headers dict so we can safely change it without those\n        # changes being reflected in anyone else's copy.\n        if not http_tunnel_required:\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(\n                conn, \"sock\", None\n            )\n            if is_new_proxy_conn and http_tunnel_required:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n>           httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n            )\n\nE:\\pycharm_file\\Chamet_project\\Lib\\site-packages\\urllib3\\connectionpool.py:703: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPConnectionPool object at 0x0000017F68784B90>, conn = <urllib3.connection.HTTPConnection object at 0x0000017F69ADA690>, method = 'POST'\nurl = '/wd/hub/session/e728f5c4-deae-4945-ab6d-a2cef974b6fd/element', timeout = Timeout(connect=<object object at 0x0000017F65BE4890>, read=<object object at 0x0000017F65BE4890>, total=None), chunked = False\nhttplib_request_kw = {'body': '{\"using\": \"id\", \"value\": \"com.hkfuliao.chamet:id/iv_invite\"}', 'headers': {'Accept': 'application/json', 'Co...ontent-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.9.0 (selenium/4.9.0 (python windows))'}}\ntimeout_obj = Timeout(connect=<object object at 0x0000017F65BE4890>, read=<object object at 0x0000017F65BE4890>, total=None), read_timeout = <object object at 0x0000017F65BE4890>\n\n    def _make_request(\n        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n    ):\n        \"\"\"\n        Perform a request on a given urllib connection object taken from our\n        pool.\n    \n        :param conn:\n            a connection from one of our connection pools\n    \n        :param timeout:\n            Socket timeout in seconds for the request. This can be a\n            float or integer, which will set the same timeout value for\n            the socket connect and the socket read, or an instance of\n            :class:`urllib3.util.Timeout`, which gives you more fine-grained\n            control over your timeouts.\n        \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n    \n        # Trigger any extra validation we need to do.\n        try:\n            self._validate_conn(conn)\n        except (SocketTimeout, BaseSSLError) as e:\n            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n            raise\n    \n        # conn.request() calls http.client.*.request, not the method in\n        # urllib3.request. It also calls makefile (recv) on the socket.\n        try:\n            if chunked:\n                conn.request_chunked(method, url, **httplib_request_kw)\n            else:\n                conn.request(method, url, **httplib_request_kw)\n    \n        # We are swallowing BrokenPipeError (errno.EPIPE) since the server is\n        # legitimately able to close the connection after sending a valid response.\n        # With this behaviour, the received response is still readable.\n        except BrokenPipeError:\n            # Python 3\n            pass\n        except IOError as e:\n            # Python 2 and macOS/Linux\n            # EPIPE and ESHUTDOWN are BrokenPipeError on Python 2, and EPROTOTYPE is needed on macOS\n            # https://erickt.github.io/blog/2014/11/19/adventures-in-debugging-a-potential-osx-kernel-bug/\n            if e.errno not in {\n                errno.EPIPE,\n                errno.ESHUTDOWN,\n                errno.EPROTOTYPE,\n            }:\n                raise\n    \n        # Reset the timeout for the recv() on the socket\n        read_timeout = timeout_obj.read_timeout\n    \n        # App Engine doesn't have a sock attr\n        if getattr(conn, \"sock\", None):\n            # In Python 3 socket.py will catch EAGAIN and return None when you\n            # try and read into the file pointer created by http.client, which\n            # instead raises a BadStatusLine exception. Instead of catching\n            # the exception and assuming all BadStatusLine exceptions are read\n            # timeouts, check for a zero timeout before making the request.\n            if read_timeout == 0:\n                raise ReadTimeoutError(\n                    self, url, \"Read timed out. (read timeout=%s)\" % read_timeout\n                )\n            if read_timeout is Timeout.DEFAULT_TIMEOUT:\n                conn.sock.settimeout(socket.getdefaulttimeout())\n            else:  # None or a value\n                conn.sock.settimeout(read_timeout)\n    \n        # Receive the response from the server\n        try:\n            try:\n                # Python 2.7, use buffering of HTTP responses\n                httplib_response = conn.getresponse(buffering=True)\n            except TypeError:\n                # Python 3\n                try:\n                    httplib_response = conn.getresponse()\n                except BaseException as e:\n                    # Remove the TypeError from the exception chain in\n                    # Python 3 (including for exceptions like SystemExit).\n                    # Otherwise it looks like a bug in the code.\n>                   six.raise_from(e, None)\n\nE:\\pycharm_file\\Chamet_project\\Lib\\site-packages\\urllib3\\connectionpool.py:449: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalue = None, from_value = None\n\n>   ???\n\n<string>:3: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPConnectionPool object at 0x0000017F68784B90>, conn = <urllib3.connection.HTTPConnection object at 0x0000017F69ADA690>, method = 'POST'\nurl = '/wd/hub/session/e728f5c4-deae-4945-ab6d-a2cef974b6fd/element', timeout = Timeout(connect=<object object at 0x0000017F65BE4890>, read=<object object at 0x0000017F65BE4890>, total=None), chunked = False\nhttplib_request_kw = {'body': '{\"using\": \"id\", \"value\": \"com.hkfuliao.chamet:id/iv_invite\"}', 'headers': {'Accept': 'application/json', 'Co...ontent-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.9.0 (selenium/4.9.0 (python windows))'}}\ntimeout_obj = Timeout(connect=<object object at 0x0000017F65BE4890>, read=<object object at 0x0000017F65BE4890>, total=None), read_timeout = <object object at 0x0000017F65BE4890>\n\n    def _make_request(\n        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n    ):\n        \"\"\"\n        Perform a request on a given urllib connection object taken from our\n        pool.\n    \n        :param conn:\n            a connection from one of our connection pools\n    \n        :param timeout:\n            Socket timeout in seconds for the request. This can be a\n            float or integer, which will set the same timeout value for\n            the socket connect and the socket read, or an instance of\n            :class:`urllib3.util.Timeout`, which gives you more fine-grained\n            control over your timeouts.\n        \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n    \n        # Trigger any extra validation we need to do.\n        try:\n            self._validate_conn(conn)\n        except (SocketTimeout, BaseSSLError) as e:\n            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n            raise\n    \n        # conn.request() calls http.client.*.request, not the method in\n        # urllib3.request. It also calls makefile (recv) on the socket.\n        try:\n            if chunked:\n                conn.request_chunked(method, url, **httplib_request_kw)\n            else:\n                conn.request(method, url, **httplib_request_kw)\n    \n        # We are swallowing BrokenPipeError (errno.EPIPE) since the server is\n        # legitimately able to close the connection after sending a valid response.\n        # With this behaviour, the received response is still readable.\n        except BrokenPipeError:\n            # Python 3\n            pass\n        except IOError as e:\n            # Python 2 and macOS/Linux\n            # EPIPE and ESHUTDOWN are BrokenPipeError on Python 2, and EPROTOTYPE is needed on macOS\n            # https://erickt.github.io/blog/2014/11/19/adventures-in-debugging-a-potential-osx-kernel-bug/\n            if e.errno not in {\n                errno.EPIPE,\n                errno.ESHUTDOWN,\n                errno.EPROTOTYPE,\n            }:\n                raise\n    \n        # Reset the timeout for the recv() on the socket\n        read_timeout = timeout_obj.read_timeout\n    \n        # App Engine doesn't have a sock attr\n        if getattr(conn, \"sock\", None):\n            # In Python 3 socket.py will catch EAGAIN and return None when you\n            # try and read into the file pointer created by http.client, which\n            # instead raises a BadStatusLine exception. Instead of catching\n            # the exception and assuming all BadStatusLine exceptions are read\n            # timeouts, check for a zero timeout before making the request.\n            if read_timeout == 0:\n                raise ReadTimeoutError(\n                    self, url, \"Read timed out. (read timeout=%s)\" % read_timeout\n                )\n            if read_timeout is Timeout.DEFAULT_TIMEOUT:\n                conn.sock.settimeout(socket.getdefaulttimeout())\n            else:  # None or a value\n                conn.sock.settimeout(read_timeout)\n    \n        # Receive the response from the server\n        try:\n            try:\n                # Python 2.7, use buffering of HTTP responses\n                httplib_response = conn.getresponse(buffering=True)\n            except TypeError:\n                # Python 3\n                try:\n>                   httplib_response = conn.getresponse()\n\nE:\\pycharm_file\\Chamet_project\\Lib\\site-packages\\urllib3\\connectionpool.py:444: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.HTTPConnection object at 0x0000017F69ADA690>\n\n    def getresponse(self):\n        \"\"\"Get the response from the server.\n    \n        If the HTTPConnection is in the correct state, returns an\n        instance of HTTPResponse or of whatever object is returned by\n        the response_class variable.\n    \n        If a request has not been sent or if a previous response has\n        not be handled, ResponseNotReady is raised.  If the HTTP\n        response indicates that the connection should be closed, then\n        it will be closed before the response is returned.  When the\n        connection is closed, the underlying socket is closed.\n        \"\"\"\n    \n        # if a prior response has been completed, then forget about it.\n        if self.__response and self.__response.isclosed():\n            self.__response = None\n    \n        # if a prior response exists, then it must be completed (otherwise, we\n        # cannot read this response's header to determine the connection-close\n        # behavior)\n        #\n        # note: if a prior response existed, but was connection-close, then the\n        # socket and response were made independent of this HTTPConnection\n        # object since a new request requires that we open a whole new\n        # connection\n        #\n        # this means the prior response had one of two states:\n        #   1) will_close: this connection was reset and the prior socket and\n        #                  response operate independently\n        #   2) persistent: the response was retained and we await its\n        #                  isclosed() status to become true.\n        #\n        if self.__state != _CS_REQ_SENT or self.__response:\n            raise ResponseNotReady(self.__state)\n    \n        if self.debuglevel > 0:\n            response = self.response_class(self.sock, self.debuglevel,\n                                           method=self._method)\n        else:\n            response = self.response_class(self.sock, method=self._method)\n    \n        try:\n            try:\n>               response.begin()\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\http\\client.py:1375: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <http.client.HTTPResponse object at 0x0000017F69A1F280>\n\n    def begin(self):\n        if self.headers is not None:\n            # we've already started reading the response\n            return\n    \n        # read until we get a non-100 response\n        while True:\n>           version, status, reason = self._read_status()\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\http\\client.py:318: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <http.client.HTTPResponse object at 0x0000017F69A1F280>\n\n    def _read_status(self):\n>       line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\http\\client.py:279: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <socket.SocketIO object at 0x0000017F69A1C310>, b = <memory at 0x0000017F69DCC700>\n\n    def readinto(self, b):\n        \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n        the number of bytes read.  If the socket is non-blocking and no bytes\n        are available, None is returned.\n    \n        If *b* is non-empty, a 0 return value indicates that the connection\n        was shutdown at the other end.\n        \"\"\"\n        self._checkClosed()\n        self._checkReadable()\n        if self._timeout_occurred:\n            raise OSError(\"cannot read from timed out object\")\n        while True:\n            try:\n>               return self._sock.recv_into(b)\nE               KeyboardInterrupt\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\socket.py:706: KeyboardInterrupt\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_case.test_10party_mult.Test_multchamet object at 0x0000017F695F8D90>\n\n    @allure.severity(allure.severity_level.BLOCKER)\n    @allure.title('用例10：主播端同意上麦')\n    def test_TenParty_010(self):\n        logging.info('===用例10：主播端同意上麦===')\n        try:\n            self.anchordriver.find_element(MobileBy.ID,\"com.hkfuliao.chamet:id/iv_invite\").click()\n            self.anchordriver.find_element(MobileBy.ID,\"com.hkfuliao.chamet:id/live_queue_invite\").click()\n            self.anchordriver.back()\n            assert self.anchordriver.find_element(MobileBy.XPATH,\"//android.widget.FrameLayout[2]/android.widget.FrameLayout/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.widget.FrameLayout[1]\")\n            logging.info('===断言成功，主播端同意上麦===')\n        except AssertionError as e:\n            logging.info('===断言失败===')\n            screen_name = self.multanchor.screenshot('party_ten')\n            logging.info(f'截图成功，图片为{screen_name}')\n            raise\n        except:\n            logging.info('===执行失败===')\n>           screen_name = self.multanchor.screenshot('party_ten')\n\ntest_10party_mult.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <common.partytencommon.multparty_ten_anchor.Multanchor object at 0x0000017F695EBCD0>, module = 'party_ten'\n\n    def screenshot(self, module):\n        time = self.getTime()\n        image_file = os.path.dirname(os.path.dirname(__file__)) + '/screenshots/party_ten/%s_%s.png' % (module, time)\n        self.driver.get_screenshot_as_file(image_file)\n>       with open(image_file, mode='rb') as f:\nE       FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\Users\\\\pgk bqt\\\\PycharmProjects\\\\Chamet_project\\\\common/screenshots/party_ten/party_ten_2023-06-26 11_51_22.png'\n\n..\\common\\partytencommon\\multparty_ten_anchor.py:76: FileNotFoundError"}, "attachments": [{"name": "log", "source": "831e946d-f871-481f-811f-f9a5c8c9b2c2-attachment.txt", "type": "text/plain"}], "start": 1687751472814, "stop": 1687751485735, "uuid": "78a57471-712b-450f-a826-2db4a2cd487c", "historyId": "9b3f5b546aa192883c15eeb02060057a", "testCaseId": "9b3f5b546aa192883c15eeb02060057a", "fullName": "test_10party_mult.Test_multchamet#test_TenParty_010", "labels": [{"name": "severity", "value": "blocker"}, {"name": "suite", "value": "test_10party_mult"}, {"name": "subSuite", "value": "Test_multchamet"}, {"name": "host", "value": "DESKTOP-8OL56K6"}, {"name": "thread", "value": "14112-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_10party_mult"}]}