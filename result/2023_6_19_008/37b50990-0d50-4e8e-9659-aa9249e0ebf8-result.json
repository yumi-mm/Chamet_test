{"name": "用例4：观众进入10人交友房", "status": "broken", "statusDetails": {"message": "AttributeError: 'Test_multchamet' object has no attribute 'multaudience'", "trace": "self = <test_case.test_10party_mult.Test_multchamet object at 0x0000025947A73DD0>\n\n    @allure.severity(allure.severity_level.BLOCKER)\n    @allure.title('用例4：观众进入10人交友房')\n    def test_TenParty_004(self):\n        logging.info('===用例4：观众进入10人交友房===')\n        try:\n            logging.info('===启动app===')\n>           self.audiencedriver = audience_appium_desired()\n\ntest_10party_mult.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def audience_appium_desired():\n        with open('../config/mult_config_audience.py', 'r', encoding='utf-8') as file:\n            data=yaml.load(file, Loader=yaml.FullLoader)\n        print(data)\n        desired_caps = {}\n        desired_caps['platformName'] = data['audience_platformName']\n        # desired_caps['platformVersion'] = data['audience_platformVersion']\n        desired_caps['deviceName'] = data['audience_deviceName']\n        # desired_caps['udid'] = data['anchor_udid']\n        # 可用于调用apk包的路径\n        # base_dir = os.path.dirname(os.path.dirname(__file__))\n        # app_path = os.path.join(base_dir, 'app', data['audience_appPackage'])\n    \n        desired_caps['appPackage'] = data['audience_appPackage']\n        desired_caps['appActivity'] = data['audience_appActivity']\n        desired_caps['automationName'] = data['audience_automationName']\n        desired_caps['noReset'] = data['audience_noReset']\n        desired_caps['unicodeKeyboard'] = data['audience_unicodeKeyboard']\n        desired_caps['resetKeyboard'] = data['audience_resetKeyboard']\n        desired_caps['newCommandTimeout'] = data['audience_newCommandTimeout']\n    \n        logging.info('start app......')\n>       driver = webdriver.Remote('http://localhost' + \":\" + str(data['audience_port']) + '/wd/hub', desired_caps)\n\n..\\common\\audience_desired_caps.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.webdriver.WebDriver (session=\"None\")>, command_executor = <appium.webdriver.appium_connection.AppiumConnection object at 0x00000259466EDE10>\ndesired_capabilities = {'appActivity': 'com.oversea.chat.splash.SplashActivity', 'appPackage': 'com.hkfuliao.chamet', 'automationName': 'Uiautomator2', 'deviceName': '832c16a4', ...}, browser_profile = None\nproxy = None, keep_alive = True, direct_connection = True, extensions = None, strict_ssl = True, options = None\n\n    def __init__(\n        self,\n        command_executor: Union[str, AppiumConnection] = 'http://127.0.0.1:4444/wd/hub',\n        desired_capabilities: Optional[Dict] = None,\n        browser_profile: Union[str, None] = None,\n        proxy: Union[str, None] = None,\n        keep_alive: bool = True,\n        direct_connection: bool = True,\n        extensions: Optional[List['WebDriver']] = None,\n        strict_ssl: bool = True,\n        options: Union[AppiumOptions, List[AppiumOptions], None] = None,\n    ):\n    \n        if strict_ssl is False:\n            # pylint: disable=E1101\n            # noinspection PyPackageRequirements\n            import urllib3\n    \n            # pylint: disable=E1101\n            # noinspection PyPackageRequirements\n            import urllib3.exceptions\n    \n            # noinspection PyUnresolvedReferences\n            AppiumConnection.set_certificate_bundle_path(None)\n            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n    \n        if isinstance(command_executor, str):\n            command_executor = AppiumConnection(command_executor, keep_alive=keep_alive)\n    \n>       super().__init__(\n            command_executor=command_executor,\n            desired_capabilities=desired_capabilities,\n            browser_profile=browser_profile,\n            proxy=proxy,\n            options=options,\n        )\n\nE:\\pycharm_file\\Chamet_project\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:234: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.webdriver.WebDriver (session=\"None\")>, command_executor = <appium.webdriver.appium_connection.AppiumConnection object at 0x00000259466EDE10>\ndesired_capabilities = {'appActivity': 'com.oversea.chat.splash.SplashActivity', 'appPackage': 'com.hkfuliao.chamet', 'automationName': 'Uiautomator2', 'deviceName': '832c16a4', ...}, browser_profile = None\nproxy = None, keep_alive = True, file_detector = None, options = None\n\n    def __init__(\n        self,\n        command_executor=\"http://127.0.0.1:4444\",\n        desired_capabilities=None,\n        browser_profile=None,\n        proxy=None,\n        keep_alive=True,\n        file_detector=None,\n        options: Union[BaseOptions, List[BaseOptions]] = None,\n    ) -> None:\n        \"\"\"Create a new driver that will issue commands using the wire\n        protocol.\n    \n        :Args:\n         - command_executor - Either a string representing URL of the remote server or a custom\n             remote_connection.RemoteConnection object. Defaults to 'http://127.0.0.1:4444/wd/hub'.\n         - desired_capabilities - A dictionary of capabilities to request when\n             starting the browser session. Required parameter.\n         - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.\n             Only used if Firefox is requested. Optional.\n         - proxy - A selenium.webdriver.common.proxy.Proxy object. The browser session will\n             be started with given proxy settings, if possible. Optional.\n         - keep_alive - Whether to configure remote_connection.RemoteConnection to use\n             HTTP keep-alive. Defaults to True.\n         - file_detector - Pass custom file detector object during instantiation. If None,\n             then default LocalFileDetector() will be used.\n         - options - instance of a driver options.Options class\n        \"\"\"\n        if desired_capabilities:\n            warnings.warn(\n                \"desired_capabilities has been deprecated, please pass in an Options object with options kwarg\",\n                DeprecationWarning,\n                stacklevel=2,\n            )\n        if browser_profile:\n            warnings.warn(\n                \"browser_profile has been deprecated, please pass in an Firefox Options object with options kwarg\",\n                DeprecationWarning,\n                stacklevel=2,\n            )\n        if proxy:\n            warnings.warn(\n                \"proxy has been deprecated, please pass in an Options object with options kwarg\",\n                DeprecationWarning,\n                stacklevel=2,\n            )\n        if not keep_alive:\n            warnings.warn(\n                \"keep_alive has been deprecated. We will be using True as the default value as we start removing it.\",\n                DeprecationWarning,\n                stacklevel=2,\n            )\n        capabilities = {}\n        # If we get a list we can assume that no capabilities\n        # have been passed in\n        if isinstance(options, list):\n            capabilities = create_matches(options)\n        else:\n            _ignore_local_proxy = False\n            if options:\n                capabilities = options.to_capabilities()\n                _ignore_local_proxy = options._ignore_local_proxy\n            if desired_capabilities:\n                if not isinstance(desired_capabilities, dict):\n                    raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n                capabilities.update(desired_capabilities)\n        self.command_executor = command_executor\n        if isinstance(self.command_executor, (str, bytes)):\n            self.command_executor = get_remote_connection(\n                capabilities,\n                command_executor=command_executor,\n                keep_alive=keep_alive,\n                ignore_local_proxy=_ignore_local_proxy,\n            )\n        self._is_remote = True\n        self.session_id = None\n        self.caps = {}\n        self.pinned_scripts = {}\n        self.error_handler = ErrorHandler()\n        self._switch_to = SwitchTo(self)\n        self._mobile = Mobile(self)\n        self.file_detector = file_detector or LocalFileDetector()\n        self._authenticator_id = None\n        self.start_client()\n>       self.start_session(capabilities, browser_profile)\n\nE:\\pycharm_file\\Chamet_project\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:286: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.webdriver.WebDriver (session=\"None\")>\ncapabilities = {'appActivity': 'com.oversea.chat.splash.SplashActivity', 'appPackage': 'com.hkfuliao.chamet', 'automationName': 'Uiautomator2', 'deviceName': '832c16a4', ...}, browser_profile = None\n\n    def start_session(self, capabilities: Union[Dict, AppiumOptions], browser_profile: Optional[str] = None) -> None:\n        \"\"\"Creates a new session with the desired capabilities.\n    \n        Override for Appium\n    \n        Args:\n            capabilities: Read https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/caps.md\n             for more details.\n            browser_profile: Browser profile\n        \"\"\"\n        if not isinstance(capabilities, (dict, AppiumOptions)):\n            raise InvalidArgumentException('Capabilities must be a dictionary or AppiumOptions instance')\n    \n        w3c_caps = AppiumOptions.as_w3c(capabilities) if isinstance(capabilities, dict) else capabilities.to_w3c()\n>       response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\n\nE:\\pycharm_file\\Chamet_project\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:324: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.webdriver.WebDriver (session=\"None\")>, driver_command = 'newSession'\nparams = {'capabilities': {'alwaysMatch': {'appium:appActivity': 'com.oversea.chat.splash.SplashActivity', 'appium:appPackage':....hkfuliao.chamet', 'appium:automationName': 'Uiautomator2', 'appium:deviceName': '832c16a4', ...}, 'firstMatch': [{}]}}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nE:\\pycharm_file\\Chamet_project\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000259473133D0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...s\\\\\\\\app\\\\\\\\node_modules\\\\\\\\appium\\\\\\\\node_modules\\\\\\\\appium-base-driver\\\\\\\\lib\\\\\\\\protocol\\\\\\\\protocol.js:380:37)\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Error getting device API level. Original error: Error executing adbExec. Original error: 'Command 'F:\\\\app\\\\androidsdk\\\\platform-tools\\\\adb.exe -P 5037 -s 832c16a4 shell getprop ro.build.version.sdk' exited with code 1'; Command output: error: device unauthorized.\r\nE       This adb server's $ADB_VENDOR_KEYS is not set\r\nE       Try 'adb kill-server' if that seems wrong.\r\nE       Otherwise check for a confirmation dialog on your device.\r\nE       \nE       Stacktrace:\nE       UnknownError: An unknown server-side error occurred while processing the command. Original error: Error getting device API level. Original error: Error executing adbExec. Original error: 'Command 'F:\\\\app\\\\androidsdk\\\\platform-tools\\\\adb.exe -P 5037 -s 832c16a4 shell getprop ro.build.version.sdk' exited with code 1'; Command output: error: device unauthorized.\r\nE       This adb server's $ADB_VENDOR_KEYS is not set\r\nE       Try 'adb kill-server' if that seems wrong.\r\nE       Otherwise check for a confirmation dialog on your device.\r\nE       \nE           at getResponseForW3CError (C:\\Users\\pgk bqt\\AppData\\Local\\Programs\\Appium Server GUI\\resources\\app\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\protocol\\errors.js:804:9)\nE           at asyncHandler (C:\\Users\\pgk bqt\\AppData\\Local\\Programs\\Appium Server GUI\\resources\\app\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\protocol\\protocol.js:380:37)\n\nE:\\pycharm_file\\Chamet_project\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_case.test_10party_mult.Test_multchamet object at 0x0000025947A73DD0>\n\n    @allure.severity(allure.severity_level.BLOCKER)\n    @allure.title('用例4：观众进入10人交友房')\n    def test_TenParty_004(self):\n        logging.info('===用例4：观众进入10人交友房===')\n        try:\n            logging.info('===启动app===')\n            self.audiencedriver = audience_appium_desired()\n            self.audiencedriver.implicitly_wait(10)\n            self.multaudience = Multaudience(self.audiencedriver)\n            self.multaudience.party_tab_Btn()\n            self.multaudience.audience_party_tab_Btn()\n            party_list_num = self.multaudience.party_list()\n            if party_list_num == 0:\n                pytest.skip(\"没有交友房，跳过该测试用例\")\n            party_username = self.multaudience.audience_enter_tenparty(self.which_party)\n            assert party_username == self.multaudience.party_title()\n            logging.info('===断言成功，成功进入10人交友房===')\n        except AssertionError as e:\n            logging.info('===断言失败===')\n            screen_name = self.multaudience.screenshot('party_ten')\n            logging.info(f'截图成功，图片为{screen_name}')\n            raise\n        except:\n            logging.info(\"===执行失败===\")\n>           screen_name = self.multaudience.screenshot('party_ten')\nE           AttributeError: 'Test_multchamet' object has no attribute 'multaudience'\n\ntest_10party_mult.py:106: AttributeError"}, "attachments": [{"name": "log", "source": "e6d63030-a9c8-42c3-9c6f-3bbc5e443ef7-attachment.txt", "type": "text/plain"}], "start": 1687169486627, "stop": 1687169489295, "uuid": "5801e2ae-15af-4f1d-9c5c-cd486b8d3d39", "historyId": "6e51666f221649e45249df6a775dfc4b", "testCaseId": "6e51666f221649e45249df6a775dfc4b", "fullName": "test_10party_mult.Test_multchamet#test_TenParty_004", "labels": [{"name": "severity", "value": "blocker"}, {"name": "suite", "value": "test_10party_mult"}, {"name": "subSuite", "value": "Test_multchamet"}, {"name": "host", "value": "DESKTOP-8OL56K6"}, {"name": "thread", "value": "9840-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_10party_mult"}]}