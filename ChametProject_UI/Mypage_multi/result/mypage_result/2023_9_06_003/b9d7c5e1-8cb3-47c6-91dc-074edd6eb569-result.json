{"name": "用例123-124：我的打招呼-女-已通过真人检测", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: webview=116.0.0.0)\nStacktrace:\n\tGetHandleVerifier [0x002437C3+48947]\n\t(No symbol) [0x001D8551]\n\t(No symbol) [0x000DC92D]\n\t(No symbol) [0x000C36E5]\n\t(No symbol) [0x00128CDB]\n\t(No symbol) [0x00137113]\n\t(No symbol) [0x00124E86]\n\t(No symbol) [0x001016C7]\n\t(No symbol) [0x0010284D]\n\tGetHandleVerifier [0x0048FDF9+2458985]\n\tGetHandleVerifier [0x004D744F+2751423]\n\tGetHandleVerifier [0x004D1361+2726609]\n\tGetHandleVerifier [0x002C0680+560624]\n\t(No symbol) [0x001E238C]\n\t(No symbol) [0x001DE268]\n\t(No symbol) [0x001DE392]\n\t(No symbol) [0x001D10B7]\n\tBaseThreadInitThunk [0x76D800C9+25]\n\tRtlGetAppContainerNamedObjectPath [0x771A7B1E+286]\n\tRtlGetAppContainerNamedObjectPath [0x771A7AEE+238]\n\t(No symbol) [0x00000000]", "trace": "self = <test_case.test_mypage_multi.Test_multi_mypage object at 0x000001F47D20B7D0>\n\n    @allure.story('我的打招呼')\n    # @pytest.mark.skip(reason=\"本次不执行\")\n    @allure.severity(allure.severity_level.BLOCKER)\n    @allure.title('用例123-124：我的打招呼-女-已通过真人检测')\n    def test_homepage123(self):\n        logging.info(\"===我的打招呼-女-已通过真人检测===\")\n        # GrWords_woman=0,1,2=未通过真人检测，通过但没消息，通过且有消息\n        try:\n>           print(GrWords_woman)\nE           NameError: name 'GrWords_woman' is not defined\n\ntest_mypage_multi.py:1979: NameError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_case.test_mypage_multi.Test_multi_mypage object at 0x000001F47D20B7D0>\n\n    @allure.story('我的打招呼')\n    # @pytest.mark.skip(reason=\"本次不执行\")\n    @allure.severity(allure.severity_level.BLOCKER)\n    @allure.title('用例123-124：我的打招呼-女-已通过真人检测')\n    def test_homepage123(self):\n        logging.info(\"===我的打招呼-女-已通过真人检测===\")\n        # GrWords_woman=0,1,2=未通过真人检测，通过但没消息，通过且有消息\n        try:\n            print(GrWords_woman)\n            if GrWords_woman ==0:\n                logging.info(\"===我的打招呼-未通过真人检测===\")\n                # assert self.mandriver.find_element(*MultiMan.MyGrWords_faceVerification_popoverText).text == '为保障安全性，你需要先通过真人检测'\n                self.womandriver.find_element(*MultiWoman.MyGrWords_faceVerification_popoverConfirmBtn).click()\n                assert self.womandriver.find_element(*MultiWoman.MyGrWords_faceVerification_cameraTipsXpath)\n                if self.womandriver.find_element(*MultiWoman.MyGrWords_faceVerification_cameraCloseBtn):\n                    self.womandriver.find_element(*MultiWoman.MyGrWords_faceVerification_cameraCloseBtn).click()\n                    logging.info(\"===断言成功===\")\n                else:\n                    self.womandriver.find_element(*MultiWoman.MyGrWords_faceVerification_cameraTryPopCancelBtn).click()\n                    logging.info(\"===断言成功===\")\n            else:\n                logging.info(\"===我的打招呼-已通过真人检测===\")\n                # self.mandriver.find_element(*MultiMan.MyGreetingWords_entry).click()\n                print(self.womandriver.find_elements(*MultiWoman.MyGrWords_wordListNum))\n                listNum = len(self.womandriver.find_elements(*MultiWoman.MyGrWords_wordListNum))\n                print('listNum''{}'.format(listNum))\n                print(self.womandriver.find_elements(*MultiWoman.MyGrWords_wordList_StatusFailedAndIng))\n                StatusFailedList = len(self.womandriver.find_elements(*MultiWoman.MyGrWords_wordList_StatusFailedAndIng))\n                print('StatusFailedList''{}'.format(StatusFailedList))\n                if self.multiwoman.MyGrWords_MyWords_AddBtnEle() and StatusFailedList<listNum-1:\n                    logging.info(\"===页面有增加按钮，有已通过的打招呼消息===\")\n                    self.womandriver.find_element(*MultiWoman.MyGrWords_sendAllBtn).click()\n                    self.multiwoman.MyGrWords_sendAllBtn_3levelPopConEle()\n                    # 获取toast\n                    assert self.womandriver.find_element(*MultiWoman.MyGrWords_sendAllBtn)\n                    self.womandriver.find_element(*MultiWoman.MyGrWords_goback).click()\n                elif self.multiwoman.MyGrWords_MyWords_AddBtnEle()==False and StatusFailedList<listNum:\n                    logging.info(\"===页面没有增加按钮，有已通过的打招呼消息===\")\n                    self.womandriver.find_element(*MultiWoman.MyGrWords_goback).click()\n                else:\n                    logging.info(\"===没有已通过的打招呼消息===\")\n                    self.womandriver.find_element(*MultiWoman.MyGrWords_goback).click()\n                logging.info(\"===断言成功===\")\n    \n        except AssertionError as e:\n            logging.info('===断言失败===')\n            screen_name = self.multiwoman.screenshot('我的打招呼-女-已通过真人检测')\n            logging.info(f'截图成功，图片为{screen_name}')\n            raise\n        except:\n            logging.info(\"===执行失败===\")\n>           screen_name = self.multiwoman.screenshot('我的打招呼-女-已通过真人检测')\n\ntest_mypage_multi.py:2022: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\common\\mypage_multi\\mypage_common_fun.py:111: in screenshot\n    self.driver.get_screenshot_as_file(image_file)\nC:\\Users\\1\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:929: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\nC:\\Users\\1\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:965: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\nC:\\Users\\1\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:977: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\nC:\\Users\\1\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: in execute\n    self.error_handler.check_response(response)\nC:\\Users\\1\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\appium\\webdriver\\errorhandler.py:30: in check_response\n    raise wde\nC:\\Users\\1\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\appium\\webdriver\\errorhandler.py:26: in check_response\n    super().check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x000001F47E970210>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...jectPath [0x771A7B1E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x771A7AEE+238]\\\\n\\\\t(No symbol) [0x00000000]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: webview=116.0.0.0)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x002437C3+48947]\nE       \t(No symbol) [0x001D8551]\nE       \t(No symbol) [0x000DC92D]\nE       \t(No symbol) [0x000C36E5]\nE       \t(No symbol) [0x00128CDB]\nE       \t(No symbol) [0x00137113]\nE       \t(No symbol) [0x00124E86]\nE       \t(No symbol) [0x001016C7]\nE       \t(No symbol) [0x0010284D]\nE       \tGetHandleVerifier [0x0048FDF9+2458985]\nE       \tGetHandleVerifier [0x004D744F+2751423]\nE       \tGetHandleVerifier [0x004D1361+2726609]\nE       \tGetHandleVerifier [0x002C0680+560624]\nE       \t(No symbol) [0x001E238C]\nE       \t(No symbol) [0x001DE268]\nE       \t(No symbol) [0x001DE392]\nE       \t(No symbol) [0x001D10B7]\nE       \tBaseThreadInitThunk [0x76D800C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x771A7B1E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x771A7AEE+238]\nE       \t(No symbol) [0x00000000]\n\nC:\\Users\\1\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:249: NoSuchWindowException"}, "attachments": [{"name": "log", "source": "d230988c-5f03-4a3e-a813-51abcf11586e-attachment.txt", "type": "text/plain"}], "start": 1693997030849, "stop": 1693997030855, "uuid": "04bb1cc5-b14a-43be-ad5d-9325e2cba3da", "historyId": "2326423d9b64e8c9747dc88100b8ee87", "testCaseId": "2326423d9b64e8c9747dc88100b8ee87", "fullName": "test_mypage_multi.Test_multi_mypage#test_homepage123", "labels": [{"name": "severity", "value": "blocker"}, {"name": "story", "value": "我的打招呼"}, {"name": "suite", "value": "test_mypage_multi"}, {"name": "subSuite", "value": "Test_multi_mypage"}, {"name": "host", "value": "DESKTOP-0HF3IT4"}, {"name": "thread", "value": "7256-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_mypage_multi"}]}